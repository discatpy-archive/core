# SPDX-License-Identifier: MIT

# this file was auto-generated by scripts/generate_endpoints.py

from typing import Optional

import discord_typings
from discord_typings import Snowflake

from ...file import BasicFile
from ...types import Unset
from ..route import Route
from .core import EndpointMixin

__all__ = ("ChannelEndpoints",)


class ChannelEndpoints(EndpointMixin):
    def get_channel(self, channel_id: Snowflake):
        return self.request(Route("GET", "/channels/{channel_id}", channel_id=channel_id))

    def modify_channel(
        self,
        channel_id: Snowflake,
        *,
        name: str = Unset,
        type: int = Unset,
        position: Optional[int] = Unset,
        topic: Optional[str] = Unset,
        nsfw: Optional[bool] = Unset,
        rate_limit_per_user: Optional[int] = Unset,
        bitrate: Optional[int] = Unset,
        user_limit: Optional[int] = Unset,
        permission_overwrites: Optional[list[discord_typings.PermissionOverwriteData]] = Unset,
        parent_id: Optional[Snowflake] = Unset,
        rtc_region: Optional[str] = Unset,
        video_quality_mode: Optional[int] = Unset,
        default_auto_archive_duration: Optional[int] = Unset,
        reason: Optional[str] = None,
    ):
        return self.request(
            Route("PATCH", "/channels/{channel_id}", channel_id=channel_id),
            json_params={
                "name": name,
                "type": type,
                "position": position,
                "topic": topic,
                "nsfw": nsfw,
                "rate_limit_per_user": rate_limit_per_user,
                "bitrate": bitrate,
                "user_limit": user_limit,
                "permission_overwrites": permission_overwrites,
                "parent_id": parent_id,
                "rtc_region": rtc_region,
                "video_quality_mode": video_quality_mode,
                "default_auto_archive_duration": default_auto_archive_duration,
            },
            reason=reason,
        )

    def modify_thread(
        self,
        channel_id: Snowflake,
        *,
        name: str = Unset,
        archived: bool = Unset,
        auto_archive_duration: int = Unset,
        locked: bool = Unset,
        invitable: bool = Unset,
        rate_limit_per_user: Optional[int] = Unset,
        reason: Optional[str] = None,
    ):
        return self.request(
            Route("PATCH", "/channels/{channel_id}", channel_id=channel_id),
            json_params={
                "name": name,
                "archived": archived,
                "auto_archive_duration": auto_archive_duration,
                "locked": locked,
                "invitable": invitable,
                "rate_limit_per_user": rate_limit_per_user,
            },
            reason=reason,
        )

    def delete_channel(self, channel_id: Snowflake, reason: Optional[str] = None):
        return self.request(
            Route("DELETE", "/channels/{channel_id}", channel_id=channel_id), reason=reason
        )

    def get_channel_messages(
        self,
        channel_id: Snowflake,
        *,
        around: Snowflake = Unset,
        before: Snowflake = Unset,
        after: Snowflake = Unset,
        limit: int = 50,
    ):
        return self.request(
            Route("GET", "/channels/{channel_id}/messages", channel_id=channel_id),
            query_params={"around": around, "before": before, "after": after, "limit": limit},
        )

    def get_channel_message(self, channel_id: Snowflake, message_id: Snowflake):
        return self.request(
            Route(
                "GET",
                "/channels/{channel_id}/messages/{message_id}",
                channel_id=channel_id,
                message_id=message_id,
            )
        )

    def create_message(
        self,
        channel_id: Snowflake,
        *,
        content: str = Unset,
        tts: bool = Unset,
        embeds: list[discord_typings.EmbedData] = Unset,
        allowed_mentions: discord_typings.AllowedMentionsData = Unset,
        message_reference: discord_typings.MessageReferenceData = Unset,
        components: list[discord_typings.ComponentData] = Unset,
        sticker_ids: list[Snowflake] = Unset,
        attachments: list[discord_typings.PartialAttachmentData] = Unset,
        flags: int = Unset,
        files: list[BasicFile] = Unset,
    ):
        return self.request(
            Route("POST", "/channels/{channel_id}/messages", channel_id=channel_id),
            json_params={
                "content": content,
                "tts": tts,
                "embeds": embeds,
                "allowed_mentions": allowed_mentions,
                "message_reference": message_reference,
                "components": components,
                "sticker_ids": sticker_ids,
                "attachments": attachments,
                "flags": flags,
            },
            files=files,
        )

    def crosspost_message(self, channel_id: Snowflake, message_id: Snowflake):
        return self.request(
            Route(
                "POST",
                "/channels/{channel_id}/messages/{message_id}/crosspost",
                channel_id=channel_id,
                message_id=message_id,
            )
        )

    def create_reaction(self, channel_id: Snowflake, message_id: Snowflake, emoji: str):
        return self.request(
            Route(
                "PUT",
                "/channels/{channel_id}/messages/{message_id}/reactions/{emoji}/@me",
                channel_id=channel_id,
                message_id=message_id,
                emoji=emoji,
            )
        )

    def delete_own_reaction(self, channel_id: Snowflake, message_id: Snowflake, emoji: str):
        return self.request(
            Route(
                "DELETE",
                "/channels/{channel_id}/messages/{message_id}/reactions/{emoji}/@me",
                channel_id=channel_id,
                message_id=message_id,
                emoji=emoji,
            )
        )

    def delete_user_reaction(
        self, channel_id: Snowflake, message_id: Snowflake, emoji: str, user_id: Snowflake
    ):
        return self.request(
            Route(
                "DELETE",
                "/channels/{channel_id}/messages/{message_id}/reactions/{emoji}/{user_id}",
                channel_id=channel_id,
                message_id=message_id,
                emoji=emoji,
                user_id=user_id,
            )
        )

    def get_reactions(
        self,
        channel_id: Snowflake,
        message_id: Snowflake,
        emoji: str,
        *,
        after: Snowflake = Unset,
        limit: int = 25,
    ):
        return self.request(
            Route(
                "GET",
                "/channels/{channel_id}/messages/{message_id}/reactions/{emoji}",
                channel_id=channel_id,
                message_id=message_id,
                emoji=emoji,
            ),
            query_params={"after": after, "limit": limit},
        )

    def delete_all_reactions(self, channel_id: Snowflake, message_id: Snowflake):
        return self.request(
            Route(
                "DELETE",
                "/channels/{channel_id}/messages/{message_id}/reactions",
                channel_id=channel_id,
                message_id=message_id,
            )
        )

    def delete_all_reactions_for_emoji(
        self, channel_id: Snowflake, message_id: Snowflake, emoji: str
    ):
        return self.request(
            Route(
                "DELETE",
                "/channels/{channel_id}/messages/{message_id}/reactions/{emoji}",
                channel_id=channel_id,
                message_id=message_id,
                emoji=emoji,
            )
        )

    def edit_message(
        self,
        channel_id: Snowflake,
        message_id: Snowflake,
        *,
        content: Optional[str] = Unset,
        embeds: Optional[list[discord_typings.EmbedData]] = Unset,
        allowed_mentions: Optional[discord_typings.AllowedMentionsData] = Unset,
        components: Optional[list[discord_typings.ComponentData]] = Unset,
        attachments: Optional[list[discord_typings.PartialAttachmentData]] = Unset,
        flags: Optional[int] = Unset,
        files: list[BasicFile] = Unset,
    ):
        return self.request(
            Route(
                "PATCH",
                "/channels/{channel_id}/messages/{message_id}",
                channel_id=channel_id,
                message_id=message_id,
            ),
            json_params={
                "content": content,
                "embeds": embeds,
                "allowed_mentions": allowed_mentions,
                "components": components,
                "attachments": attachments,
                "flags": flags,
            },
            files=files,
        )

    def delete_message(
        self, channel_id: Snowflake, message_id: Snowflake, reason: Optional[str] = None
    ):
        return self.request(
            Route(
                "DELETE",
                "/channels/{channel_id}/messages/{message_id}",
                channel_id=channel_id,
                message_id=message_id,
            ),
            reason=reason,
        )

    def bulk_delete_messages(
        self,
        channel_id: Snowflake,
        *,
        messages: list[discord_typings.MessageData],
        reason: Optional[str] = None,
    ):
        return self.request(
            Route("POST", "/channels/{channel_id}/messages/bulk-delete", channel_id=channel_id),
            json_params={"messages": messages},
            reason=reason,
        )

    def edit_channel_permissions(
        self,
        channel_id: Snowflake,
        overwrite_id: Snowflake,
        *,
        allow: Optional[str] = Unset,
        deny: Optional[str] = Unset,
        type: int,
        reason: Optional[str] = None,
    ):
        return self.request(
            Route(
                "PUT",
                "/channels/{channel_id}/permissions/{overwrite_id}",
                channel_id=channel_id,
                overwrite_id=overwrite_id,
            ),
            json_params={"allow": allow, "deny": deny, "type": type},
            reason=reason,
        )

    def get_channel_invites(self, channel_id: Snowflake):
        return self.request(Route("GET", "/channels/{channel_id}/invites", channel_id=channel_id))

    def create_channel_invite(
        self,
        channel_id: Snowflake,
        *,
        max_age: int = 86400,
        max_uses: int = 0,
        temporary: bool = False,
        unique: bool = False,
        target_type: int,
        target_user_id: Snowflake = Unset,
        target_application_id: Snowflake = Unset,
        reason: Optional[str] = None,
    ):
        return self.request(
            Route("POST", "/channels/{channel_id}/invites", channel_id=channel_id),
            json_params={
                "max_age": max_age,
                "max_uses": max_uses,
                "temporary": temporary,
                "unique": unique,
                "target_type": target_type,
                "target_user_id": target_user_id,
                "target_application_id": target_application_id,
            },
            reason=reason,
        )

    def delete_channel_permission(
        self, channel_id: Snowflake, overwrite_id: Snowflake, reason: Optional[str] = None
    ):
        return self.request(
            Route(
                "DELETE",
                "/channels/{channel_id}/permissions/{overwrite_id}",
                channel_id=channel_id,
                overwrite_id=overwrite_id,
            ),
            reason=reason,
        )

    def follow_announcement_channel(self, channel_id: Snowflake, *, webhook_channel_id: Snowflake):
        return self.request(
            Route("POST", "/channels/{channel_id}/followers", channel_id=channel_id),
            json_params={"webhook_channel_id": webhook_channel_id},
        )

    def trigger_typing_indicator(self, channel_id: Snowflake):
        return self.request(Route("POST", "/channels/{channel_id}/typing", channel_id=channel_id))

    def get_pinned_messages(self, channel_id: Snowflake):
        return self.request(Route("GET", "/channels/{channel_id}/pins", channel_id=channel_id))

    def pin_message(
        self, channel_id: Snowflake, message_id: Snowflake, reason: Optional[str] = None
    ):
        return self.request(
            Route(
                "PUT",
                "/channels/{channel_id}/pins/{message_id}",
                channel_id=channel_id,
                message_id=message_id,
            ),
            reason=reason,
        )

    def unpin_message(
        self, channel_id: Snowflake, message_id: Snowflake, reason: Optional[str] = None
    ):
        return self.request(
            Route(
                "DELETE",
                "/channels/{channel_id}/pins/{message_id}",
                channel_id=channel_id,
                message_id=message_id,
            ),
            reason=reason,
        )

    def start_thread_from_message(
        self,
        channel_id: Snowflake,
        message_id: Snowflake,
        *,
        name: str,
        auto_archive_duration: int = Unset,
        rate_limit_per_user: Optional[int] = Unset,
        reason: Optional[str] = None,
    ):
        return self.request(
            Route(
                "POST",
                "/channels/{channel_id}/messages/{message_id}/threads",
                channel_id=channel_id,
                message_id=message_id,
            ),
            json_params={
                "name": name,
                "auto_archive_duration": auto_archive_duration,
                "rate_limit_per_user": rate_limit_per_user,
            },
            reason=reason,
        )

    def start_thread_without_message(
        self,
        channel_id: Snowflake,
        *,
        name: str,
        auto_archive_duration: int = Unset,
        type: int = Unset,
        invitable: bool = Unset,
        rate_limit_per_user: Optional[int] = Unset,
        reason: Optional[str] = None,
    ):
        return self.request(
            Route("POST", "/channels/{channel_id}/threads", channel_id=channel_id),
            json_params={
                "name": name,
                "auto_archive_duration": auto_archive_duration,
                "type": type,
                "invitable": invitable,
                "rate_limit_per_user": rate_limit_per_user,
            },
            reason=reason,
        )

    def start_thread_in_forum_channel(
        self,
        channel_id: Snowflake,
        *,
        name: str,
        auto_archive_duration: int = Unset,
        rate_limit_per_user: Optional[int] = Unset,
        content: str = Unset,
        embeds: list[discord_typings.EmbedData] = Unset,
        allowed_mentions: discord_typings.AllowedMentionsData = Unset,
        components: list[discord_typings.ComponentData] = Unset,
        sticker_ids: list[Snowflake] = Unset,
        attachments: list[discord_typings.PartialAttachmentData] = Unset,
        flags: int = Unset,
        applied_tags: list[Snowflake] = Unset,
        reason: Optional[str] = None,
        files: list[BasicFile] = Unset,
    ):
        return self.request(
            Route("POST", "/channels/{channel_id}/threads", channel_id=channel_id),
            json_params={
                "name": name,
                "auto_archive_duration": auto_archive_duration,
                "rate_limit_per_user": rate_limit_per_user,
                "content": content,
                "embeds": embeds,
                "allowed_mentions": allowed_mentions,
                "components": components,
                "sticker_ids": sticker_ids,
                "attachments": attachments,
                "flags": flags,
                "applied_tags": applied_tags,
            },
            reason=reason,
            files=files,
        )

    def join_thread(self, channel_id: Snowflake):
        return self.request(
            Route("PUT", "/channels/{channel_id}/thread-members/@me", channel_id=channel_id)
        )

    def add_thread_member(self, channel_id: Snowflake, user_id: Snowflake):
        return self.request(
            Route(
                "PUT",
                "/channels/{channel_id}/thread-members/{user_id}",
                channel_id=channel_id,
                user_id=user_id,
            )
        )

    def leave_thread(self, channel_id: Snowflake):
        return self.request(
            Route("DELETE", "/channels/{channel_id}/thread-members/@me", channel_id=channel_id)
        )

    def remove_thread_member(self, channel_id: Snowflake, user_id: Snowflake):
        return self.request(
            Route(
                "DELETE",
                "/channels/{channel_id}/thread-members/{user_id}",
                channel_id=channel_id,
                user_id=user_id,
            )
        )

    def get_thread_member(self, channel_id: Snowflake, user_id: Snowflake):
        return self.request(
            Route(
                "GET",
                "/channels/{channel_id}/thread-members/{user_id}",
                channel_id=channel_id,
                user_id=user_id,
            )
        )

    def list_thread_members(self, channel_id: Snowflake):
        return self.request(
            Route("GET", "/channels/{channel_id}/thread-members", channel_id=channel_id)
        )

    def list_public_archived_threads(
        self, channel_id: Snowflake, *, before: str = Unset, limit: int = Unset
    ):
        return self.request(
            Route("GET", "/channels/{channel_id}/threads/archived/public", channel_id=channel_id),
            query_params={"before": before, "limit": limit},
        )

    def list_private_archived_threads(
        self, channel_id: Snowflake, *, before: str = Unset, limit: int = Unset
    ):
        return self.request(
            Route("GET", "/channels/{channel_id}/threads/archived/private", channel_id=channel_id),
            query_params={"before": before, "limit": limit},
        )

    def list_joined_private_archived_threads(
        self, channel_id: Snowflake, *, before: str = Unset, limit: int = Unset
    ):
        return self.request(
            Route(
                "GET",
                "/channels/{channel_id}/users/@me/threads/archived/private",
                channel_id=channel_id,
            ),
            query_params={"before": before, "limit": limit},
        )
