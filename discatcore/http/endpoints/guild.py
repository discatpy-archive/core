"""
The MIT License (MIT)

Copyright (c) 2022-present EmreTech

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
"""

# this file was auto-generated by scripts/generate_endpoints.py

from typing import Any, Optional, Union

import discord_typings
from discord_typings import Snowflake

from discatcore.file import BasicFile
from discatcore.http.endpoints.core import EndpointMixin
from discatcore.http.route import Route
from discatcore.types import Unset

__all__ = ("GuildEndpoints",)


class GuildEndpoints(EndpointMixin):
    async def create_guild(
        self,
        *,
        name: str,
        region: Optional[str] = Unset,
        icon: str = Unset,
        verification_level: int = Unset,
        default_message_notifications: int = Unset,
        explicit_content_filter: int = Unset,
        roles: list[discord_typings.RoleData] = Unset,
        channels: list[discord_typings.PartialChannelData] = Unset,
        afk_channel_id: Snowflake = Unset,
        afk_timeout: int = Unset,
        system_channel_id: Snowflake = Unset,
        system_channel_flags: int = Unset,
    ):
        return await self.request(
            Route("POST", "/guilds"),
            json_params={
                "name": name,
                "region": region,
                "icon": icon,
                "verification_level": verification_level,
                "default_message_notifications": default_message_notifications,
                "explicit_content_filter": explicit_content_filter,
                "roles": roles,
                "channels": channels,
                "afk_channel_id": afk_channel_id,
                "afk_timeout": afk_timeout,
                "system_channel_id": system_channel_id,
                "system_channel_flags": system_channel_flags,
            },
        )

    async def get_guild(self, guild_id: Snowflake, *, with_counts: bool = False):
        return await self.request(
            Route("GET", "/guilds/{guild_id}", guild_id=guild_id),
            query_params={"with_counts": with_counts},
        )

    async def get_guild_preview(self, guild_id: Snowflake):
        return await self.request(Route("GET", "/guilds/{guild_id}/preview", guild_id=guild_id))

    async def modify_guild(
        self,
        guild_id: Snowflake,
        *,
        name: str = Unset,
        region: Optional[str] = Unset,
        icon: Optional[str] = Unset,
        verification_level: Optional[int] = Unset,
        default_message_notifications: Optional[int] = Unset,
        explicit_content_filter: Optional[int] = Unset,
        afk_channel_id: Optional[Snowflake] = Unset,
        afk_timeout: int = Unset,
        system_channel_id: Optional[Snowflake] = Unset,
        system_channel_flags: int = Unset,
        owner_id: Snowflake = Unset,
        splash: Optional[str] = Unset,
        discovery_splash: Optional[str] = Unset,
        banner: Optional[str] = Unset,
        rules_channel_id: Optional[Snowflake] = Unset,
        public_updates_channel_id: Optional[Snowflake] = Unset,
        preferred_locale: Optional[str] = Unset,
        features: list[str] = Unset,
        description: Optional[str] = Unset,
        premium_progress_bar_enabled: bool = Unset,
        reason: Optional[str] = None,
    ):
        return await self.request(
            Route("PATCH", "/guilds/{guild_id}", guild_id=guild_id),
            json_params={
                "name": name,
                "region": region,
                "icon": icon,
                "verification_level": verification_level,
                "default_message_notifications": default_message_notifications,
                "explicit_content_filter": explicit_content_filter,
                "afk_channel_id": afk_channel_id,
                "afk_timeout": afk_timeout,
                "system_channel_id": system_channel_id,
                "system_channel_flags": system_channel_flags,
                "owner_id": owner_id,
                "splash": splash,
                "discovery_splash": discovery_splash,
                "banner": banner,
                "rules_channel_id": rules_channel_id,
                "public_updates_channel_id": public_updates_channel_id,
                "preferred_locale": preferred_locale,
                "features": features,
                "description": description,
                "premium_progress_bar_enabled": premium_progress_bar_enabled,
            },
            reason=reason,
        )

    async def delete_guild(self, guild_id: Snowflake):
        return await self.request(Route("DELETE", "/guilds/{guild_id}", guild_id=guild_id))

    async def get_guild_channels(self, guild_id: Snowflake):
        return await self.request(Route("GET", "/guilds/{guild_id}/channels", guild_id=guild_id))

    async def create_guild_channel(
        self,
        guild_id: Snowflake,
        *,
        name: str,
        type: Optional[int] = Unset,
        topic: Optional[str] = Unset,
        bitrate: Optional[int] = Unset,
        user_limit: Optional[int] = Unset,
        rate_limit_per_user: Optional[int] = Unset,
        position: Optional[int] = Unset,
        permission_overwrites: Optional[list[discord_typings.PermissionOverwriteData]] = Unset,
        parent_id: Optional[Snowflake] = Unset,
        nsfw: Optional[bool] = Unset,
        rtc_region: Optional[str] = Unset,
        video_quality_mode: Optional[int] = Unset,
        default_auto_archive_duration: Optional[int] = Unset,
        reason: Optional[str] = None,
    ):
        return await self.request(
            Route("POST", "/guilds/{guild_id}/channels", guild_id=guild_id),
            json_params={
                "name": name,
                "type": type,
                "topic": topic,
                "bitrate": bitrate,
                "user_limit": user_limit,
                "rate_limit_per_user": rate_limit_per_user,
                "position": position,
                "permission_overwrites": permission_overwrites,
                "parent_id": parent_id,
                "nsfw": nsfw,
                "rtc_region": rtc_region,
                "video_quality_mode": video_quality_mode,
                "default_auto_archive_duration": default_auto_archive_duration,
            },
            reason=reason,
        )

    async def modify_guild_channel_positions(
        self,
        guild_id: Snowflake,
        *,
        id: Snowflake,
        position: Optional[int] = Unset,
        lock_permissions: Optional[bool] = Unset,
        parent_id: Optional[Snowflake] = Unset,
    ):
        return await self.request(
            Route("PATCH", "/guilds/{guild_id}/channels", guild_id=guild_id),
            json_params={
                "id": id,
                "position": position,
                "lock_permissions": lock_permissions,
                "parent_id": parent_id,
            },
        )

    async def list_active_guild_threads(self, guild_id: Snowflake):
        return await self.request(
            Route("GET", "/guilds/{guild_id}/threads/active", guild_id=guild_id)
        )

    async def get_guild_member(self, guild_id: Snowflake, user_id: Snowflake):
        return await self.request(
            Route("GET", "/guilds/{guild_id}/members/{user_id}", guild_id=guild_id, user_id=user_id)
        )

    async def list_guild_members(
        self, guild_id: Snowflake, *, limit: int = 1, after: Snowflake = Unset
    ):
        return await self.request(
            Route("GET", "/guilds/{guild_id}/members", guild_id=guild_id),
            query_params={"limit": limit, "after": after},
        )

    async def search_guild_members(self, guild_id: Snowflake, *, query: str, limit: int = 1):
        return await self.request(
            Route("GET", "/guilds/{guild_id}/members/search", guild_id=guild_id),
            query_params={"query": query, "limit": limit},
        )

    async def modify_guild_member(
        self,
        guild_id: Snowflake,
        user_id: Snowflake,
        *,
        nick: Optional[str] = Unset,
        roles: Optional[list[Snowflake]] = Unset,
        mute: Optional[bool] = Unset,
        deaf: Optional[bool] = Unset,
        channel_id: Optional[Snowflake] = Unset,
        communication_disabled_until: Optional[str] = Unset,
        reason: Optional[str] = None,
    ):
        return await self.request(
            Route(
                "PATCH", "/guilds/{guild_id}/members/{user_id}", guild_id=guild_id, user_id=user_id
            ),
            json_params={
                "nick": nick,
                "roles": roles,
                "mute": mute,
                "deaf": deaf,
                "channel_id": channel_id,
                "communication_disabled_until": communication_disabled_until,
            },
            reason=reason,
        )

    async def modify_current_member(
        self, guild_id: Snowflake, *, nick: Optional[str] = Unset, reason: Optional[str] = None
    ):
        return await self.request(
            Route("PATCH", "/guilds/{guild_id}/members/@me", guild_id=guild_id),
            json_params={"nick": nick},
            reason=reason,
        )

    async def add_guild_member_role(
        self,
        guild_id: Snowflake,
        user_id: Snowflake,
        role_id: Snowflake,
        reason: Optional[str] = None,
    ):
        return await self.request(
            Route(
                "PUT",
                "/guilds/{guild_id}/members/{user_id}/roles/{role_id}",
                guild_id=guild_id,
                user_id=user_id,
                role_id=role_id,
            ),
            reason=reason,
        )

    async def remove_guild_member_role(
        self,
        guild_id: Snowflake,
        user_id: Snowflake,
        role_id: Snowflake,
        reason: Optional[str] = None,
    ):
        return await self.request(
            Route(
                "DELETE",
                "/guilds/{guild_id}/members/{user_id}/roles/{role_id}",
                guild_id=guild_id,
                user_id=user_id,
                role_id=role_id,
            ),
            reason=reason,
        )

    async def remove_guild_member(
        self, guild_id: Snowflake, user_id: Snowflake, reason: Optional[str] = None
    ):
        return await self.request(
            Route(
                "DELETE", "/guilds/{guild_id}/members/{user_id}", guild_id=guild_id, user_id=user_id
            ),
            reason=reason,
        )

    async def get_guild_bans(
        self,
        guild_id: Snowflake,
        *,
        limit: int = 1000,
        before: Snowflake = Unset,
        after: Snowflake = Unset,
    ):
        return await self.request(
            Route("GET", "/guilds/{guild_id}/bans", guild_id=guild_id),
            query_params={"limit": limit, "before": before, "after": after},
        )

    async def get_guild_ban(self, guild_id: Snowflake, user_id: Snowflake):
        return await self.request(
            Route("GET", "/guilds/{guild_id}/bans/{user_id}", guild_id=guild_id, user_id=user_id)
        )

    async def create_guild_ban(
        self,
        guild_id: Snowflake,
        user_id: Snowflake,
        *,
        delete_message_seconds: int = Unset,
        reason: Optional[str] = None,
    ):
        return await self.request(
            Route("PUT", "/guilds/{guild_id}/bans/{user_id}", guild_id=guild_id, user_id=user_id),
            json_params={"delete_message_seconds": delete_message_seconds},
            reason=reason,
        )

    async def remove_guild_ban(
        self, guild_id: Snowflake, user_id: Snowflake, reason: Optional[str] = None
    ):
        return await self.request(
            Route(
                "DELETE", "/guilds/{guild_id}/bans/{user_id}", guild_id=guild_id, user_id=user_id
            ),
            reason=reason,
        )

    async def get_guild_roles(self, guild_id: Snowflake):
        return await self.request(Route("GET", "/guilds/{guild_id}/roles", guild_id=guild_id))

    async def create_guild_role(
        self,
        guild_id: Snowflake,
        *,
        name: str = Unset,
        permissions: str = Unset,
        color: int = Unset,
        hoist: bool = Unset,
        icon: Optional[str] = Unset,
        unicode_emoji: Optional[str] = Unset,
        mentionable: bool = Unset,
        reason: Optional[str] = None,
    ):
        return await self.request(
            Route("POST", "/guilds/{guild_id}/roles", guild_id=guild_id),
            json_params={
                "name": name,
                "permissions": permissions,
                "color": color,
                "hoist": hoist,
                "icon": icon,
                "unicode_emoji": unicode_emoji,
                "mentionable": mentionable,
            },
            reason=reason,
        )

    async def modify_guild_role_positions(
        self,
        guild_id: Snowflake,
        *,
        id: Snowflake,
        position: Optional[int] = Unset,
        reason: Optional[str] = None,
    ):
        return await self.request(
            Route("PATCH", "/guilds/{guild_id}/roles", guild_id=guild_id),
            json_params={"id": id, "position": position},
            reason=reason,
        )

    async def modify_guild_role(
        self,
        guild_id: Snowflake,
        role_id: Snowflake,
        *,
        name: Optional[str] = Unset,
        permissions: Optional[str] = Unset,
        color: Optional[int] = Unset,
        hoist: Optional[bool] = Unset,
        icon: Optional[str] = Unset,
        unicode_emoji: Optional[str] = Unset,
        mentionable: Optional[bool] = Unset,
        reason: Optional[str] = None,
    ):
        return await self.request(
            Route(
                "PATCH", "/guilds/{guild_id}/roles/{role_id}", guild_id=guild_id, role_id=role_id
            ),
            json_params={
                "name": name,
                "permissions": permissions,
                "color": color,
                "hoist": hoist,
                "icon": icon,
                "unicode_emoji": unicode_emoji,
                "mentionable": mentionable,
            },
            reason=reason,
        )

    async def modify_guild_mfa_level(
        self, guild_id: Snowflake, *, level: int, reason: Optional[str] = None
    ):
        return await self.request(
            Route("POST", "/guilds/{guild_id}/mfa", guild_id=guild_id),
            json_params={"level": level},
            reason=reason,
        )

    async def delete_guild_role(
        self, guild_id: Snowflake, role_id: Snowflake, reason: Optional[str] = None
    ):
        return await self.request(
            Route(
                "DELETE", "/guilds/{guild_id}/roles/{role_id}", guild_id=guild_id, role_id=role_id
            ),
            reason=reason,
        )

    async def get_guild_prune_count(
        self, guild_id: Snowflake, *, days: int = 7, include_roles: str = Unset
    ):
        return await self.request(
            Route("GET", "/guilds/{guild_id}/prune", guild_id=guild_id),
            query_params={"days": days, "include_roles": include_roles},
        )

    async def begin_guild_prune(
        self,
        guild_id: Snowflake,
        *,
        days: int = 7,
        compute_prune_count: bool = True,
        include_roles: list[Snowflake] = Unset,
        reason: Optional[str] = None,
    ):
        return await self.request(
            Route("POST", "/guilds/{guild_id}/prune", guild_id=guild_id),
            json_params={
                "days": days,
                "compute_prune_count": compute_prune_count,
                "include_roles": include_roles,
            },
            reason=reason,
        )

    async def get_guild_voice_regions(self, guild_id: Snowflake):
        return await self.request(Route("GET", "/guilds/{guild_id}/regions", guild_id=guild_id))

    async def get_guild_invites(self, guild_id: Snowflake):
        return await self.request(Route("GET", "/guilds/{guild_id}/invites", guild_id=guild_id))

    async def get_guild_integrations(self, guild_id: Snowflake):
        return await self.request(
            Route("GET", "/guilds/{guild_id}/integrations", guild_id=guild_id)
        )

    async def delete_guild_integration(
        self, guild_id: Snowflake, integration_id: Snowflake, reason: Optional[str] = None
    ):
        return await self.request(
            Route(
                "DELETE",
                "/guilds/{guild_id}/integrations/{integration_id}",
                guild_id=guild_id,
                integration_id=integration_id,
            ),
            reason=reason,
        )

    async def get_guild_widget_settings(self, guild_id: Snowflake):
        return await self.request(Route("GET", "/guilds/{guild_id}/widget", guild_id=guild_id))

    async def modify_guild_widget(
        self,
        guild_id: Snowflake,
        *,
        enabled: bool = Unset,
        channel_id: Optional[Snowflake] = Unset,
        reason: Optional[str] = None,
    ):
        return await self.request(
            Route("PATCH", "/guilds/{guild_id}/widget", guild_id=guild_id),
            json_params={"enabled": enabled, "channel_id": channel_id},
            reason=reason,
        )

    async def get_guild_widget(self, guild_id: Snowflake):
        return await self.request(Route("GET", "/guilds/{guild_id}/widget.json", guild_id=guild_id))

    async def get_guild_vanity_url(self, guild_id: Snowflake):
        return await self.request(Route("GET", "/guilds/{guild_id}/vanity-url", guild_id=guild_id))

    async def get_guild_widget_image(self, guild_id: Snowflake, *, style: str = Unset):
        return await self.request(
            Route("GET", "/guilds/{guild_id}/widget.png", guild_id=guild_id),
            query_params={"style": style},
        )

    async def get_guild_welcome_screen(self, guild_id: Snowflake):
        return await self.request(
            Route("GET", "/guilds/{guild_id}/welcome-screen", guild_id=guild_id)
        )

    async def modify_guild_welcome_screen(
        self,
        guild_id: Snowflake,
        *,
        enabled: Optional[bool] = Unset,
        welcome_channels: Optional[list[discord_typings.WelcomeChannelData]] = Unset,
        description: Optional[str] = Unset,
        reason: Optional[str] = None,
    ):
        return await self.request(
            Route("PATCH", "/guilds/{guild_id}/welcome-screen", guild_id=guild_id),
            json_params={
                "enabled": enabled,
                "welcome_channels": welcome_channels,
                "description": description,
            },
            reason=reason,
        )

    async def modify_current_user_voice_state(
        self,
        guild_id: Snowflake,
        *,
        channel_id: Snowflake = Unset,
        suppress: bool = Unset,
        request_to_speak_timestamp: Optional[str] = Unset,
    ):
        return await self.request(
            Route("PATCH", "/guilds/{guild_id}/voice-states/@me", guild_id=guild_id),
            json_params={
                "channel_id": channel_id,
                "suppress": suppress,
                "request_to_speak_timestamp": request_to_speak_timestamp,
            },
        )

    async def modify_user_voice_state(
        self,
        guild_id: Snowflake,
        user_id: Snowflake,
        *,
        channel_id: Snowflake,
        suppress: bool = Unset,
    ):
        return await self.request(
            Route(
                "PATCH",
                "/guilds/{guild_id}/voice-states/{user_id}",
                guild_id=guild_id,
                user_id=user_id,
            ),
            json_params={"channel_id": channel_id, "suppress": suppress},
        )
