# SPDX-License-Identifier: MIT

# this file was auto-generated by scripts/generate_endpoints.py

from typing import Optional

import discord_typings
from discord_typings import Snowflake

from discatcore.file import BasicFile
from discatcore.http.endpoints.core import EndpointMixin
from discatcore.http.route import Route
from discatcore.types import Unset

__all__ = ("InteractionEndpoints",)


class InteractionEndpoints(EndpointMixin):
    def create_interaction_response(
        self,
        interaction_id: Snowflake,
        interaction_token: str,
        *,
        type: discord_typings.InteractionCallbackTypes,
        data: discord_typings.InteractionCallbackData = Unset,
        files: list[BasicFile] = Unset,
    ):
        return self.request(
            Route(
                "POST",
                "/interactions/{interaction_id}/{interaction_token}/callback",
                interaction_id=interaction_id,
                interaction_token=interaction_token,
            ),
            json_params={"type": type, "data": data},
            files=files,
        )

    def get_original_interaction_response(self, application_id: Snowflake, interaction_token: str):
        return self.request(
            Route(
                "GET",
                "/webhooks/{application_id}/{interaction_token}/messages/@original",
                application_id=application_id,
                interaction_token=interaction_token,
            )
        )

    def edit_original_interaction_response(
        self,
        application_id: Snowflake,
        interaction_token: str,
        *,
        content: Optional[str] = Unset,
        embeds: Optional[list[discord_typings.EmbedData]] = Unset,
        allowed_mentions: Optional[discord_typings.AllowedMentionsData] = Unset,
        components: Optional[list[discord_typings.ComponentData]] = Unset,
        attachments: Optional[list[discord_typings.PartialAttachmentData]] = Unset,
        files: list[BasicFile] = Unset,
    ):
        return self.request(
            Route(
                "PATCH",
                "/webhooks/{application_id}/{interaction_token}/messages/@original",
                application_id=application_id,
                interaction_token=interaction_token,
            ),
            json_params={
                "content": content,
                "embeds": embeds,
                "allowed_mentions": allowed_mentions,
                "components": components,
                "attachments": attachments,
            },
            files=files,
        )

    def delete_original_interaction_response(
        self, application_id: Snowflake, interaction_token: str
    ):
        return self.request(
            Route(
                "DELETE",
                "/webhooks/{application_id}/{interaction_token}/messages/@original",
                application_id=application_id,
                interaction_token=interaction_token,
            )
        )

    def create_followup_message(
        self,
        application_id: Snowflake,
        interaction_token: str,
        *,
        content: str = Unset,
        tts: bool = Unset,
        embeds: list[discord_typings.EmbedData] = Unset,
        allowed_mentions: discord_typings.AllowedMentionsData = Unset,
        components: list[discord_typings.ComponentData] = Unset,
        attachments: list[discord_typings.PartialAttachmentData] = Unset,
        flags: int = Unset,
        thread_name: str = Unset,
        files: list[BasicFile] = Unset,
    ):
        return self.request(
            Route(
                "POST",
                "/webhooks/{application_id}/{interaction_token}",
                application_id=application_id,
                interaction_token=interaction_token,
            ),
            json_params={
                "content": content,
                "tts": tts,
                "embeds": embeds,
                "allowed_mentions": allowed_mentions,
                "components": components,
                "attachments": attachments,
                "flags": flags,
                "thread_name": thread_name,
            },
            files=files,
        )

    def get_followup_message(
        self, application_id: Snowflake, interaction_token: str, message_id: Snowflake
    ):
        return self.request(
            Route(
                "GET",
                "/webhooks/{application_id}/{interaction_token}/messages/{message_id}",
                application_id=application_id,
                interaction_token=interaction_token,
                message_id=message_id,
            )
        )

    def edit_followup_message(
        self,
        application_id: Snowflake,
        interaction_token: str,
        message_id: Snowflake,
        *,
        content: Optional[str] = Unset,
        embeds: Optional[list[discord_typings.EmbedData]] = Unset,
        allowed_mentions: Optional[discord_typings.AllowedMentionsData] = Unset,
        components: Optional[list[discord_typings.ComponentData]] = Unset,
        attachments: Optional[list[discord_typings.PartialAttachmentData]] = Unset,
        files: list[BasicFile] = Unset,
    ):
        return self.request(
            Route(
                "PATCH",
                "/webhooks/{application_id}/{interaction_token}/messages/{message_id}",
                application_id=application_id,
                interaction_token=interaction_token,
                message_id=message_id,
            ),
            json_params={
                "content": content,
                "embeds": embeds,
                "allowed_mentions": allowed_mentions,
                "components": components,
                "attachments": attachments,
            },
            files=files,
        )

    def delete_followup_message(
        self, application_id: Snowflake, interaction_token: str, message_id: Snowflake
    ):
        return self.request(
            Route(
                "DELETE",
                "/webhooks/{application_id}/{interaction_token}/messages/{message_id}",
                application_id=application_id,
                interaction_token=interaction_token,
                message_id=message_id,
            )
        )
