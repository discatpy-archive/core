# SPDX-License-Identifier: MIT

# this file was auto-generated by scripts/generate_endpoints.py

import typing as t

import discord_typings as dt

from ...types import Unset, UnsetOr
from ..route import Route
from .core import EndpointMixin

__all__ = ("GuildScheduledEventEndpoints",)


class GuildScheduledEventEndpoints(EndpointMixin):
    def list_scheduled_events_for_guild(
        self, guild_id: dt.Snowflake, *, with_user_count: UnsetOr[bool] = Unset
    ):
        return self.request(
            Route("GET", "/guilds/{guild_id}/scheduled-events", guild_id=guild_id),
            query_params={"with_user_count": with_user_count},
        )

    def create_guild_scheduled_event(
        self,
        guild_id: dt.Snowflake,
        *,
        channel_id: UnsetOr[dt.Snowflake] = Unset,
        entity_metadata: UnsetOr[dt.GuildScheduledEventEntityMetadataData] = Unset,
        name: str,
        privacy_level: dt.GuildScheduledEventPrivacyLevels,
        scheduled_start_time: str,
        scheduled_end_time: UnsetOr[str] = Unset,
        description: UnsetOr[str] = Unset,
        entity_type: dt.GuildScheduledEventEntityTypes,
        image: UnsetOr[str] = Unset,
        reason: t.Optional[str] = None,
    ):
        return self.request(
            Route("POST", "/guilds/{guild_id}/scheduled-events", guild_id=guild_id),
            json_params={
                "channel_id": channel_id,
                "entity_metadata": entity_metadata,
                "name": name,
                "privacy_level": privacy_level,
                "scheduled_start_time": scheduled_start_time,
                "scheduled_end_time": scheduled_end_time,
                "description": description,
                "entity_type": entity_type,
                "image": image,
            },
            reason=reason,
        )

    def get_guild_scheduled_event(
        self,
        guild_id: dt.Snowflake,
        guild_scheduled_event_id: dt.Snowflake,
        *,
        with_user_count: UnsetOr[bool] = Unset,
    ):
        return self.request(
            Route(
                "GET",
                "/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}",
                guild_id=guild_id,
                guild_scheduled_event_id=guild_scheduled_event_id,
            ),
            query_params={"with_user_count": with_user_count},
        )

    def modify_guild_scheduled_event(
        self,
        guild_id: dt.Snowflake,
        guild_scheduled_event_id: dt.Snowflake,
        *,
        channel_id: UnsetOr[dt.Snowflake] = Unset,
        entity_metadata: UnsetOr[t.Optional[dt.GuildScheduledEventEntityMetadataData]] = Unset,
        name: UnsetOr[str] = Unset,
        privacy_level: UnsetOr[dt.GuildScheduledEventPrivacyLevels] = Unset,
        scheduled_start_time: UnsetOr[str] = Unset,
        scheduled_end_time: UnsetOr[str] = Unset,
        description: UnsetOr[t.Optional[str]] = Unset,
        entity_type: UnsetOr[dt.GuildScheduledEventEntityTypes] = Unset,
        image: UnsetOr[str] = Unset,
        status: UnsetOr[dt.GuildScheduledEventStatus] = Unset,
        reason: t.Optional[str] = None,
    ):
        return self.request(
            Route(
                "PATCH",
                "/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}",
                guild_id=guild_id,
                guild_scheduled_event_id=guild_scheduled_event_id,
            ),
            json_params={
                "channel_id": channel_id,
                "entity_metadata": entity_metadata,
                "name": name,
                "privacy_level": privacy_level,
                "scheduled_start_time": scheduled_start_time,
                "scheduled_end_time": scheduled_end_time,
                "description": description,
                "entity_type": entity_type,
                "image": image,
                "status": status,
            },
            reason=reason,
        )

    def delete_guild_scheduled_event(
        self, guild_id: dt.Snowflake, guild_scheduled_event_id: dt.Snowflake
    ):
        return self.request(
            Route(
                "DELETE",
                "/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}",
                guild_id=guild_id,
                guild_scheduled_event_id=guild_scheduled_event_id,
            )
        )

    def get_guild_scheduled_event_users(
        self,
        guild_id: dt.Snowflake,
        guild_scheduled_event_id: dt.Snowflake,
        *,
        limit: int = 100,
        with_member: bool = False,
        before: UnsetOr[dt.Snowflake] = Unset,
        after: UnsetOr[dt.Snowflake] = Unset,
    ):
        return self.request(
            Route(
                "GET",
                "/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}/users",
                guild_id=guild_id,
                guild_scheduled_event_id=guild_scheduled_event_id,
            ),
            query_params={
                "limit": limit,
                "with_member": with_member,
                "before": before,
                "after": after,
            },
        )
