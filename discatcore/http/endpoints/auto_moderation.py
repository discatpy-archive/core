# SPDX-License-Identifier: MIT

# this file was auto-generated by scripts/generate_endpoints.py

import typing as t

import discord_typings as dt

from ...types import Unset, UnsetOr
from ..route import Route
from .core import EndpointMixin

__all__ = ("AutoModerationEndpoints",)


class AutoModerationEndpoints(EndpointMixin):
    def list_auto_moderation_rules(self, guild_id: dt.Snowflake):
        return self.request(
            Route("GET", "/guilds/{guild_id}/auto-moderation/rules", guild_id=guild_id)
        )

    def get_auto_moderation_rule(
        self, guild_id: dt.Snowflake, auto_moderation_rule_id: dt.Snowflake
    ):
        return self.request(
            Route(
                "GET",
                "/guilds/{guild_id}/auto-moderation/rules/{auto_moderation_rule_id}",
                guild_id=guild_id,
                auto_moderation_rule_id=auto_moderation_rule_id,
            )
        )

    def create_auto_moderation_rule(
        self,
        guild_id: dt.Snowflake,
        *,
        name: str,
        event_type: dt.AutoModerationEventTypes,
        trigger_type: dt.AutoModerationTriggerTypes,
        trigger_metadata: UnsetOr[dt.AutoModerationTriggerMetadataData] = Unset,
        actions: list[dt.AutoModerationActionData],
        enabled: UnsetOr[bool] = Unset,
        exempt_roles: UnsetOr[list[dt.Snowflake]] = Unset,
        exempt_channels: UnsetOr[list[dt.Snowflake]] = Unset,
        reason: t.Optional[str] = None,
    ):
        return self.request(
            Route("POST", "/guilds/{guild_id}/auto-moderation/rules", guild_id=guild_id),
            json_params={
                "name": name,
                "event_type": event_type,
                "trigger_type": trigger_type,
                "trigger_metadata": trigger_metadata,
                "actions": actions,
                "enabled": enabled,
                "exempt_roles": exempt_roles,
                "exempt_channels": exempt_channels,
            },
            reason=reason,
        )

    def modify_auto_moderation_rule(
        self,
        guild_id: dt.Snowflake,
        auto_moderation_rule_id: dt.Snowflake,
        *,
        name: UnsetOr[str] = Unset,
        event_type: UnsetOr[dt.AutoModerationEventTypes] = Unset,
        trigger_metadata: UnsetOr[dt.AutoModerationTriggerMetadataData] = Unset,
        actions: UnsetOr[list[dt.AutoModerationActionData]] = Unset,
        enabled: UnsetOr[bool] = Unset,
        exempt_roles: UnsetOr[list[dt.Snowflake]] = Unset,
        exempt_channels: UnsetOr[list[dt.Snowflake]] = Unset,
        reason: t.Optional[str] = None,
    ):
        return self.request(
            Route(
                "PATCH",
                "/guilds/{guild_id}/auto-moderation/rules/{auto_moderation_rule_id}",
                guild_id=guild_id,
                auto_moderation_rule_id=auto_moderation_rule_id,
            ),
            json_params={
                "name": name,
                "event_type": event_type,
                "trigger_metadata": trigger_metadata,
                "actions": actions,
                "enabled": enabled,
                "exempt_roles": exempt_roles,
                "exempt_channels": exempt_channels,
            },
            reason=reason,
        )

    def delete_auto_moderation_rule(
        self,
        guild_id: dt.Snowflake,
        auto_moderation_rule_id: dt.Snowflake,
        reason: t.Optional[str] = None,
    ):
        return self.request(
            Route(
                "DELETE",
                "/guilds/{guild_id}/auto-moderation/rules/{auto_moderation_rule_id}",
                guild_id=guild_id,
                auto_moderation_rule_id=auto_moderation_rule_id,
            ),
            reason=reason,
        )
