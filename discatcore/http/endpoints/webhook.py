# SPDX-License-Identifier: MIT

# this file was auto-generated by scripts/generate_endpoints.py

from typing import Optional

import discord_typings
from discord_typings import Snowflake

from ...file import BasicFile
from ...types import Unset
from ..route import Route
from .core import EndpointMixin

__all__ = ("WebhookEndpoints",)


class WebhookEndpoints(EndpointMixin):
    def create_webhook(
        self,
        channel_id: Snowflake,
        *,
        name: str,
        avatar: Optional[str] = Unset,
        reason: Optional[str] = None,
    ):
        return self.request(
            Route("POST", "/channels/{channel_id}/webhooks", channel_id=channel_id),
            json_params={"name": name, "avatar": avatar},
            reason=reason,
        )

    def get_channel_webhooks(self, channel_id: Snowflake):
        return self.request(Route("GET", "/channels/{channel_id}/webhooks", channel_id=channel_id))

    def get_guild_webhooks(self, guild_id: Snowflake):
        return self.request(Route("GET", "/guilds/{guild_id}/webhooks", guild_id=guild_id))

    def get_webhook(self, webhook_id: Snowflake):
        return self.request(Route("GET", "/webhooks/{webhook_id}", webhook_id=webhook_id))

    def get_webhook_with_token(self, webhook_id: Snowflake, webhook_token: str):
        return self.request(
            Route(
                "GET",
                "/webhooks/{webhook_id}/{webhook_token}",
                webhook_id=webhook_id,
                webhook_token=webhook_token,
            )
        )

    def modify_webhook(
        self,
        webhook_id: Snowflake,
        *,
        name: str = Unset,
        avatar: Optional[str] = Unset,
        channel_id: Snowflake = Unset,
        reason: Optional[str] = None,
    ):
        return self.request(
            Route("PATCH", "/webhooks/{webhook_id}", webhook_id=webhook_id),
            json_params={"name": name, "avatar": avatar, "channel_id": channel_id},
            reason=reason,
        )

    def modify_webhook_with_token(
        self,
        webhook_id: Snowflake,
        webhook_token: str,
        *,
        name: str = Unset,
        avatar: Optional[str] = Unset,
        reason: Optional[str] = None,
    ):
        return self.request(
            Route(
                "PATCH",
                "/webhooks/{webhook_id}/{webhook_token}",
                webhook_id=webhook_id,
                webhook_token=webhook_token,
            ),
            json_params={"name": name, "avatar": avatar},
            reason=reason,
        )

    def delete_webhook(self, webhook_id: Snowflake, reason: Optional[str] = None):
        return self.request(
            Route("DELETE", "/webhooks/{webhook_id}", webhook_id=webhook_id), reason=reason
        )

    def delete_webhook_with_token(
        self, webhook_id: Snowflake, webhook_token: str, reason: Optional[str] = None
    ):
        return self.request(
            Route(
                "DELETE",
                "/webhooks/{webhook_id}/{webhook_token}",
                webhook_id=webhook_id,
                webhook_token=webhook_token,
            ),
            reason=reason,
        )

    def execute_webhook(
        self,
        webhook_id: Snowflake,
        webhook_token: str,
        *,
        content: str = Unset,
        username: str = Unset,
        avatar_url: str = Unset,
        tts: bool = Unset,
        embeds: list[discord_typings.EmbedData] = Unset,
        allowed_mentions: discord_typings.AllowedMentionsData = Unset,
        components: list[discord_typings.ComponentData] = Unset,
        attachments: list[discord_typings.PartialAttachmentData] = Unset,
        flags: int = Unset,
        thread_name: str = Unset,
        wait: bool = False,
        thread_id: Snowflake = Unset,
        files: list[BasicFile] = Unset,
    ):
        return self.request(
            Route(
                "POST",
                "/webhooks/{webhook_id}/{webhook_token}",
                webhook_id=webhook_id,
                webhook_token=webhook_token,
            ),
            json_params={
                "content": content,
                "username": username,
                "avatar_url": avatar_url,
                "tts": tts,
                "embeds": embeds,
                "allowed_mentions": allowed_mentions,
                "components": components,
                "attachments": attachments,
                "flags": flags,
                "thread_name": thread_name,
            },
            query_params={"wait": wait, "thread_id": thread_id},
            files=files,
        )

    def get_webhook_message(
        self,
        webhook_id: Snowflake,
        webhook_token: str,
        message_id: Snowflake,
        *,
        thread_id: Snowflake = Unset,
    ):
        return self.request(
            Route(
                "GET",
                "/webhooks/{webhook_id}/{webhook_token}/messages/{message_id}",
                webhook_id=webhook_id,
                webhook_token=webhook_token,
                message_id=message_id,
            ),
            query_params={"thread_id": thread_id},
        )

    def edit_webhook_message(
        self,
        webhook_id: Snowflake,
        webhook_token: str,
        message_id: Snowflake,
        *,
        content: Optional[str] = Unset,
        embeds: Optional[list[discord_typings.EmbedData]] = Unset,
        allowed_mentions: Optional[discord_typings.AllowedMentionsData] = Unset,
        components: Optional[list[discord_typings.ComponentData]] = Unset,
        attachments: Optional[list[discord_typings.PartialAttachmentData]] = Unset,
        thread_id: Snowflake = Unset,
        files: list[BasicFile] = Unset,
    ):
        return self.request(
            Route(
                "PATCH",
                "/webhooks/{webhook_id}/{webhook_token}/messages/{message_id}",
                webhook_id=webhook_id,
                webhook_token=webhook_token,
                message_id=message_id,
            ),
            json_params={
                "content": content,
                "embeds": embeds,
                "allowed_mentions": allowed_mentions,
                "components": components,
                "attachments": attachments,
            },
            query_params={"thread_id": thread_id},
            files=files,
        )

    def delete_webhook_message(
        self,
        webhook_id: Snowflake,
        webhook_token: str,
        message_id: Snowflake,
        *,
        thread_id: Snowflake = Unset,
    ):
        return self.request(
            Route(
                "DELETE",
                "/webhooks/{webhook_id}/{webhook_token}/messages/{message_id}",
                webhook_id=webhook_id,
                webhook_token=webhook_token,
                message_id=message_id,
            ),
            query_params={"thread_id": thread_id},
        )
